define(BOOT_SCR, "${PROJECT_ROOT}/output/images/boot.scr")
define(KERNEL_IMAGE, "${PROJECT_ROOT}/output/images/Image")
define(DTB, "${PROJECT_ROOT}/output/images/smk-k26-revA-sck-kr-g-revB.dtb")
define(ROOTFS, "${PROJECT_ROOT}/output/images/rootfs.ext2")

# Image layout
# +------------------------+
# | MBR            (LBA 0) |
# +------------------------+
# | Boot partition (FAT32) |
# | boot.scr               |
# | kernel image           |
# | *dtb                   |
# +------------------------+
# | Rootfs (EXT4)          |
# +------------------------+

# The boot partition has room for boot.scr, kernel image and dtb.
define(BOOT_PART_OFFSET, 1)
define(BOOT_PART_COUNT, 262144) # 262144 * 512 / 1024 / 1024 = 128 MiB

# Let the rootfs have room to grow up to 128 MiB (256K 512-byte blocks)
define-eval(ROOTFS_PART_OFFSET, "${BOOT_PART_OFFSET} + ${BOOT_PART_COUNT}")
define(ROOTFS_PART_COUNT, 262144) # 262144 * 512 / 1024 / 1024 = 128 MiB

# Firmware metadata
meta-product = "Image for the KR260"
meta-description = "This image boots to Linux."
meta-version = "0.1"
meta-platform = "zynqmp_kria_kr260"
meta-architecture = "arm"
meta-author = "5G & Beyond with Elixir"

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource boot.scr {
    host-path = ${BOOT_SCR}
}
file-resource Image {
    host-path = ${KERNEL_IMAGE}
}
file-resource smk-k26-revA-sck-kr-g-revB.dtb {
    host-path = ${DTB}
}
file-resource rootfs.ext2 {
    host-path = ${ROOTFS}
}

mbr mbr-a {
    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0x0B # FAT32
    }
    partition 1 {
        block-offset = ${ROOTFS_PART_OFFSET}
        block-count = ${ROOTFS_PART_COUNT}
        type = 0x83 # Linux
    }
}

# This firmware task writes everything to the destination media
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    # Everything that gets written can be verified on the fly.
    # This speeds things up, since we don't care about detecting
    # errors before data gets written.
    verify-on-the-fly = true

    on-init {
        mbr_write(mbr-a)
        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
    }

    on-resource boot.scr { fat_write(${BOOT_PART_OFFSET}, "boot.scr") }
    on-resource Image { fat_write(${BOOT_PART_OFFSET}, "Image") }
    on-resource smk-k26-revA-sck-kr-g-revB.dtb { fat_write(${BOOT_PART_OFFSET}, "smk-k26-revA-sck-kr-g-revB.dtb") }

    on-resource rootfs.ext2 {
        # write to the first rootfs partition
        raw_write(${ROOTFS_PART_OFFSET})
    }

    on-finish {
    }
}
